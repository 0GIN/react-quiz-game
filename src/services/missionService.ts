import { supabase } from '../lib/supabase';

/**
 * Typy misji dostƒôpne w systemie
 */
export type MissionType = 
  | 'win_games'           // Wygraj X gier
  | 'answer_category'     // Odpowiedz na X pyta≈Ñ z kategorii
  | 'perfect_game'        // Uko≈Ñcz X gier bezb≈Çƒôdnie
  | 'play_games'          // Zagraj X gier
  | 'earn_flash_points';  // ZdobƒÖd≈∫ X FlashPoints

/**
 * Parametry ≈õledzenia postƒôpu misji
 */
export interface MissionProgress {
  missionType: MissionType;
  increment?: number;      // Ile dodaƒá do postƒôpu (domy≈õlnie 1)
  categoryId?: number;     // Dla misji 'answer_category'
}

/**
 * Dane misji z bazy
 */
interface DailyMissionData {
  id: number;
  mission_type: string;
  target_value: number;
  flash_points_reward: number;
  experience_reward: number;
}

/**
 * G≈Ç√≥wna funkcja ≈õledzƒÖca postƒôp misji
 * Wywo≈Çuj jƒÖ po ka≈ºdej akcji gracza (wygrana, odpowied≈∫, etc.)
 */
export async function trackMissionProgress(
  userId: string,
  progress: MissionProgress
): Promise<boolean> {
  try {
    const today = new Date().toISOString().split('T')[0];
    
    // Pobierz aktywne misje u≈ºytkownika tego typu
    const { data: userMissions, error } = await supabase
      .from('user_daily_missions')
      .select(`
        id,
        current_progress,
        is_completed,
        mission_id
      `)
      .eq('user_id', userId)
      .eq('is_completed', false);
    
    if (error || !userMissions || userMissions.length === 0) {
      if (error) console.error('B≈ÇƒÖd pobierania misji:', error);
      return true;
    }

    // Pobierz dane misji osobno
    const { data: missionsData, error: missionsError } = await supabase
      .from('daily_missions')
      .select('*')
      .in('id', userMissions.map(m => m.mission_id))
      .eq('mission_type', progress.missionType)
      .eq('valid_date', today)
      .eq('is_active', true);

    if (missionsError || !missionsData) {
      console.error('B≈ÇƒÖd pobierania danych misji:', missionsError);
      return false;
    }

    // Aktualizuj postƒôp dla ka≈ºdej pasujƒÖcej misji
    for (const userMission of userMissions) {
      // Znajd≈∫ odpowiadajƒÖcƒÖ misjƒô
      const missionData = missionsData.find(m => m.id === userMission.mission_id);
      if (!missionData) continue;

      const increment = progress.increment || 1;
      const newProgress = userMission.current_progress + increment;
      
      // Aktualizuj postƒôp w bazie
      const { error: updateError } = await supabase
        .from('user_daily_missions')
        .update({ current_progress: newProgress })
        .eq('id', userMission.id);

      if (updateError) {
        console.error('B≈ÇƒÖd aktualizacji postƒôpu:', updateError);
        continue;
      }

      console.log(`‚úÖ Misja ${missionData.name}: ${newProgress}/${missionData.target_value}`);

      // Sprawd≈∫ czy misja zosta≈Ça uko≈Ñczona
      if (newProgress >= missionData.target_value && !userMission.is_completed) {
        await completeMission(
          userMission.id, 
          userId, 
          missionData as DailyMissionData
        );
      }
    }

    return true;
  } catch (err) {
    console.error('B≈ÇƒÖd ≈õledzenia misji:', err);
    return false;
  }
}

/**
 * Oznacza misjƒô jako uko≈ÑczonƒÖ i przyznaje nagrody
 */
async function completeMission(
  userMissionId: string,
  userId: string,
  missionData: DailyMissionData
): Promise<void> {
  try {
    // 1. Oznacz misjƒô jako uko≈ÑczonƒÖ
    const { error: completeError } = await supabase
      .from('user_daily_missions')
      .update({ 
        is_completed: true, 
        completed_at: new Date().toISOString() 
      })
      .eq('id', userMissionId);

    if (completeError) {
      console.error('B≈ÇƒÖd oznaczania misji jako uko≈Ñczonej:', completeError);
      return;
    }

    // 2. Przyznaj nagrody - najpierw pobierz aktualne warto≈õci
    const { data: userData, error: fetchError } = await supabase
      .from('users')
      .select('flash_points, experience')
      .eq('id', userId)
      .single();

    if (fetchError || !userData) {
      console.error('B≈ÇƒÖd pobierania danych u≈ºytkownika:', fetchError);
      return;
    }

    const { error: rewardError } = await supabase
      .from('users')
      .update({
        flash_points: userData.flash_points + missionData.flash_points_reward,
        experience: userData.experience + missionData.experience_reward
      })
      .eq('id', userId);

    if (rewardError) {
      console.error('B≈ÇƒÖd przyznawania nagr√≥d:', rewardError);
      return;
    }

    console.log(`üéâ Misja uko≈Ñczona! +${missionData.flash_points_reward} FP, +${missionData.experience_reward} XP`);
    
    // TODO: Wy≈õwietl powiadomienie u≈ºytkownikowi
    // showNotification(`Misja uko≈Ñczona! +${missionData.flash_points_reward} FP`);
    
  } catch (err) {
    console.error('B≈ÇƒÖd uko≈Ñczenia misji:', err);
  }
}

/**
 * Inicjalizuje misje dla u≈ºytkownika na dany dzie≈Ñ
 * Wywo≈Çaj przy pierwszym logowaniu u≈ºytkownika w dniu
 */
export async function initializeDailyMissions(userId: string): Promise<void> {
  try {
    const today = new Date().toISOString().split('T')[0];
    
    // Pobierz wszystkie aktywne misje na dzi≈õ
    const { data: dailyMissions, error: missionsError } = await supabase
      .from('daily_missions')
      .select('id')
      .eq('valid_date', today)
      .eq('is_active', true);

    if (missionsError || !dailyMissions) {
      console.error('B≈ÇƒÖd pobierania misji:', missionsError);
      return;
    }

    // Dla ka≈ºdej misji, sprawd≈∫ czy u≈ºytkownik ju≈º jƒÖ ma
    for (const mission of dailyMissions) {
      const { data: existing } = await supabase
        .from('user_daily_missions')
        .select('id')
        .eq('user_id', userId)
        .eq('mission_id', mission.id)
        .single();

      // Je≈õli nie ma, utw√≥rz
      if (!existing) {
        await supabase
          .from('user_daily_missions')
          .insert({
            user_id: userId,
            mission_id: mission.id,
            current_progress: 0,
            is_completed: false
          });
      }
    }

    console.log(`‚úÖ Misje zainicjalizowane dla u≈ºytkownika ${userId}`);
  } catch (err) {
    console.error('B≈ÇƒÖd inicjalizacji misji:', err);
  }
}

/**
 * Pomocnicze funkcje do szybkiego ≈õledzenia konkretnych akcji
 */

export const MissionTracker = {
  // Gracz uko≈Ñczy≈Ç grƒô
  async onGamePlayed(userId: string) {
    return trackMissionProgress(userId, { missionType: 'play_games' });
  },

  // Gracz wygra≈Ç grƒô
  async onGameWon(userId: string) {
    return trackMissionProgress(userId, { missionType: 'win_games' });
  },

  // Gracz uko≈Ñczy≈Ç grƒô bezb≈Çƒôdnie (100% poprawnych odpowiedzi)
  async onPerfectGame(userId: string) {
    return trackMissionProgress(userId, { missionType: 'perfect_game' });
  },

  // Gracz odpowiedzia≈Ç na pytanie z danej kategorii
  async onCategoryAnswered(userId: string, categoryId: number) {
    return trackMissionProgress(userId, { 
      missionType: 'answer_category',
      categoryId 
    });
  },

  // Gracz zdoby≈Ç FlashPoints
  async onFlashPointsEarned(userId: string, amount: number) {
    return trackMissionProgress(userId, { 
      missionType: 'earn_flash_points',
      increment: amount 
    });
  }
};
